// Generated by CoffeeScript 1.10.0
(function() {
    var autoLink,
        slice = [].slice;

    autoLink = function() {
        var callback, k, linkAttributes, option, options, pattern, v;
        options = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        pattern = /(^|[\s\n]|<[A-Za-z]*\/?>)((?:https?|ftp):\/\/[\-A-Z0-9+\u0026\u2019@#\/%?=()~_|!:,.;]*[\-A-Z0-9+\u0026@#\/%=~()_|])/gi;
        if (!(options.length > 0)) {
            return this.replace(pattern, "$1<a href='$2'>$2</a>");
        }
        option = options[0];
        callback = option["callback"];
        linkAttributes = ((function() {
            var results;
            results = [];
            for (k in option) {
                v = option[k];
                if (k !== 'callback') {
                    results.push(" " + k + "='" + v + "'");
                }
            }
            return results;
        })()).join('');
        return this.replace(pattern, function(match, space, url) {
            var link;
            link = (typeof callback === "function" ? callback(url) : void 0) || ("<a href='" + url + "'" + linkAttributes + ">" + url + "</a>");
            return "" + space + link;
        });
    };

    String.prototype['autoLink'] = autoLink;

}).call(this);

$(function () {
    var chatDatabase = firebase.database();
    var countChatUser = -1;
    var $infoLoggedUser = $('#inp-hidden-auth-user');
    var current_user_id = $infoLoggedUser.data('user_id');
    var temp_current_user_id = (current_user_id == 1)?'1a':current_user_id;


    chatDatabase.ref('onlines/' + current_user_id).set({
        user_id: current_user_id,
        time: Math.floor(Date.now() / 1000)
    });

    function checkOnline(snapshot) {
        $('.action-chat-contact').find('.online').addClass('hide');
        // $('.action-chat-contact').find('.offline').addClass('hide');
        current_time = Math.floor(Date.now() / 1000);
        snapshot.forEach(function (childSnapshot) {
            if (parseInt(childSnapshot.val().time) >= parseInt(current_time - 5 * 60)) {
                $('.action-chat-contact[data-user_id=' + childSnapshot.val().user_id + ']').find('.online').removeClass('hide');
                $('.action-chat-contact[data-user_id=' + childSnapshot.val().user_id + ']').find('.offline').addClass('hide');
            } else {
                $('.action-chat-contact[data-user_id=' + childSnapshot.val().user_id + ']').find('.offline').removeClass('hide');
                $('.action-chat-contact[data-user_id=' + childSnapshot.val().user_id + ']').find('.online').addClass('hide');
                // chatDatabase.ref('onlines/' + childSnapshot.val().user_id).remove();
            }
        });
    }

    // chatDatabase.ref('onlines').once('value', function (snapshot) {
    //     checkOnline(snapshot);
    // });

    chatDatabase.ref('onlines').on('value', function (snapshot) {
        // console.log(snapshot.val());
        checkOnline(snapshot);
    });

    //Lọc user online

    // var temp_current_user_id = (current_user_id != 1)?current_user_id:(current_user_id + 'a');

    chatDatabase.ref('channel/' + temp_current_user_id).on('value', function (snapshot) {
        snapshot.forEach(function (childSnapshot) {
            // console.log(childSnapshot.val().sender_id);
            var sender_id = childSnapshot.val().sender_id;
            if (sender_id && sender_id > 0 && $("#chat-box-for-user-" + sender_id).length <= 0) {
                openChatBox(sender_id);
                fill_chat_content_first(sender_id);
            }
        });
    });

    // chatDatabase.ref('channel/' + current_user_id).limitToLast(1).on('child_added', function (snapshot) {
    //     // Tạo dòng tin nhắn khi box được mở
    //     console.log('child_added');
    //     console.log(snapshot.val());
    //     var sender_id = snapshot.val().sender_id;
    //     if (sender_id && sender_id > 0) {
    //         openChatBox(sender_id);
    //         // chatDatabase.ref('channel/' + current_user_id).remove();
    //     }
    // });

    // chatDatabase.ref('channel/' + $infoLoggedUser.data('user_id')).on('child_changed', function(snapshot) {
    //     //
    //     console.log('child_changed');
    //     console.log(snapshot.val());
    // });


    function get_channel_id(senderId, receiverId) {
        var arrayId = [senderId, receiverId];
        arrayId.sort();

        var channelId = arrayId.join('_');
        return channelId;
    }


    function generate_template_message(messageData, snapshot) {
        var $templateMsg = $($('#template-message').html());
        // Tin nhắn của thằng đang đăng nhập thì ở bên phải
        // Nếu ko phải message của tao thì hiện tên thằng gửi
        if (messageData.sender_id == $infoLoggedUser.data('user_id')) {
            $templateMsg.addClass('right');
            $templateMsg.find('.direct-chat-img').remove();
            $templateMsg.find('.direct-chat-info').remove();
        } else {
            var img_src = $('.action-chat-contact[data-user_id=' + messageData.sender_id + ']').find('.contact-avatar img').attr('src');
            $templateMsg.find('.direct-chat-img').attr('src', img_src);
            $templateMsg.find('.direct-chat-name').text(messageData.sender_name);

            //format time
            var date = new Date(messageData.time * 1000);
            time_string = date.getDate() + '/' + (parseInt(date.getMonth()) + 1) + '/' + date.getFullYear() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
            $templateMsg.find('.direct-chat-timestamp').text(time_string);
        }

        $templateMsg.attr({
            id: 'direct-chat-'+snapshot.key,
            'data-time': messageData.time,
            'data-key': snapshot.key
        });

        // Hiện nd tin nhắn
        // $templateMsg.find('.direct-chat-text').html(Linkify(messageData.message));
        try {
            $templateMsg.find('.direct-chat-text').html(messageData.message.autoLink({
                'target': '_blank',
                callback: function(url) {
                    return /\.(gif|png|jpe|bmp?g)$/i.test(url) ? '<img src="' + url + '">' : null;
                }
            }));
        } catch (err) {

        }

        return $templateMsg;
    }

    function Linkify(inputText) {

        //URLs starting with http://, https://, or ftp://
        var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
        var replacedText = inputText.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

        //URLs starting with www. (without // before it, or it'd re-link the ones done above)
        var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
        var replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

        //Change email addresses to mailto:: links
        var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
        var replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

        return replacedText
    }

    function openChatBox(receiver_id) {

        //Co roi thi thoi ko openChatBox nua
        if ($("#chat-box-for-user-" + receiver_id).length > 0) {
            $("#chat-box-for-user-" + receiver_id).appendTo($("#chat-box-for-user-" + receiver_id).parent());
            $("#chat-box-for-user-" + receiver_id).find('input').focus();
            try {
                $("#chat-box-for-user-" + receiver_id).find('.direct-chat-messages')[0].scrollTop = $("#chat-box-for-user-" + receiver_id).find('.direct-chat-messages')[0].scrollHeight;
            } catch (Err) {

            }

            return;
        }

        var receiver_name = $('.action-chat-contact[data-user_id=' + receiver_id + ']').data('user_name');

        if ($("#chat-box-for-user-" + receiver_id).length == 0) {
            $container = $("<div>").attr({
                id: "chat-box-for-user-" + receiver_id,
                class: "chat-box-for-user"
            }).css({
                position: 'fixed',
                right: 315,
                bottom: -10,
                width: 250,
                zIndex: 100
            });
        } else {
            $container = $("#chat-box-for-user-" + receiver_id);
        }

        $container.html($("#template-chat-box").html());

        $container.find('.box-title').text(receiver_name);
        $container.find('[name="message"]').attr({
            'data-user_id': receiver_id,
            'data-user_name': receiver_name
        });

        $container.find('.image-icon').attr({
            'data-user_id': receiver_id,
            'data-user_name': receiver_name
        });

        if ($("#chat-box-for-user-" + receiver_id).length == 0) {
            $('body').append($container);
        } else {
            $container.show();
        }

        sortBox($container);

        $container.find('input').focus();

        // Hiện tin nhắn cũ
        var senderId = $infoLoggedUser.data('user_id');
        var receiverId = receiver_id;
        var channelId = get_channel_id(senderId, receiverId);


        temp_sender_id = (senderId != 1)?senderId:(senderId + 'a');
        chatDatabase.ref('channel/' + temp_sender_id + '/' + receiverId).set({
            sender_id: receiver_id,
            status: 0
        });

        // Các đoạn chat tiếp theo chỉ apppend thôi cho nhẹ
        chatDatabase.ref('channel/' + channelId).orderByKey().limitToLast(1).on('child_added', function (snapshot) {
            // console.log('child_added_169');
            var box_id = (snapshot.val().user_id == current_user_id) ? snapshot.val().sender_id : snapshot.val().user_id;
            $container = $("#chat-box-for-user-" + box_id);

            if($('#direct-chat-'+snapshot.key).length == 0) {
                $container.find('.direct-chat-messages').append(generate_template_message(snapshot.val(), snapshot));
            }

            try {
                $container.find('.direct-chat-messages')[0].scrollTop = $container.find('.direct-chat-messages')[0].scrollHeight;
            } catch (Err) {

            }
        });

        // Sự kiện scroll đọc tin nhắn cũ
        // OLD MESSAGE
        $container.find('.direct-chat-messages')[0].addEventListener('scroll', function(e) {
            var _boxEl = $(e.target);
            if(_boxEl.scrollTop() == 0) {
                var startAt = _boxEl.find('.direct-chat-msg').length;
                var topMsgEleInBox = $(_boxEl.find('.direct-chat-msg')[0]);
                // Load old message
                chatDatabase.ref('channel/' + channelId).orderByChild('time').endAt(topMsgEleInBox.data('time')).limitToLast(20).on('value', function(snapshot) {
                    var arrayChildSnapshot = [];
                    snapshot.forEach( function(childSnapshot) {
                        arrayChildSnapshot.push(childSnapshot);
                    });

                    // Đảo lại msg để prepend
                    var arrayChildSnapshotReverse = arrayChildSnapshot.reverse();
                    for( var i = 0; i < arrayChildSnapshotReverse.length; i ++) {
                        var childSnapshot = arrayChildSnapshotReverse[i];
                        var box_id = (childSnapshot.val().user_id == current_user_id) ? childSnapshot.val().sender_id : childSnapshot.val().user_id;
                        $container = $("#chat-box-for-user-" + box_id);

                        if($('#direct-chat-'+childSnapshot.key).length == 0) {
                            $container.find('.direct-chat-messages').prepend(generate_template_message(childSnapshot.val(), childSnapshot));
                        }
                    }
                });
            }
        });
    }

    function fill_chat_content_first(receiver_id) {
        channelId = get_channel_id(current_user_id, receiver_id);

        console.log(channelId);
        // Hiện lần đầu tiên
        chatDatabase.ref('channel/' + channelId).orderByKey().limitToLast(20).once('value', function (snapshot) {

            $container.find('.direct-chat-messages').empty();

            snapshot.forEach(function (childSnapshot) {

                var box_id = (childSnapshot.val().user_id == current_user_id) ? childSnapshot.val().sender_id : childSnapshot.val().user_id;
                $container = $("#chat-box-for-user-" + box_id);

                if($('#direct-chat-'+childSnapshot.key).length == 0) {
                    $container.find('.direct-chat-messages').append(generate_template_message(childSnapshot.val(), childSnapshot));
                }
            });

            try {
                $container.find('.direct-chat-messages')[0].scrollTop = $container.find('.direct-chat-messages')[0].scrollHeight;
            } catch (Err) {

            }
        });
    }

    $('.action-chat-contact').on('click', function () {
        var receiver_id = $(this).data('user_id');
        openChatBox(receiver_id);
        fill_chat_content_first(receiver_id);
    });

    $(document).on('keypress', '.input-message-to-chat', function (e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode == 13) {
            var $input = $(this);
            var receiver_id = $input.data('user_id');
            var message = $input.val();
            send_message(receiver_id, message);

            $input.val('');
            return false;
        }
    });

    $(document).on('click', '.submit_chat', function (e) {
        var $input = $(this).parent().prev('input');
        var receiver_id = $input.data('user_id');
        var message = $input.val();
        send_message(receiver_id, message);
        $input.val('');
        return false;
    });


    function send_message(receiver_id, message) {

        if (message == '') {
            return;
        }
        var senderId = $infoLoggedUser.data('user_id');
        var sender_name = $infoLoggedUser.data('user_name');
        var channelId = get_channel_id(senderId, receiver_id);

        chatDatabase.ref('channel/' + channelId).push().set({
            sender_id: senderId,
            user_id: receiver_id,
            sender_name: sender_name,
            time: Math.floor(Date.now() / 1000),
            message: message
        });


        temp_receiver_id = (receiver_id != 1)?receiver_id:(receiver_id + 'a');

        chatDatabase.ref('channel/' + temp_receiver_id + '/' + senderId).set({
            sender_id: senderId,
            status: 0
        });
    }

    // Upload image
    var _receiverId = 0;
    $(document).on('click', '.action-upload-image', function () {
        var $this = $(this);
        _receiverId = $this.data('user_id');
        $('#inp-hidden-file').trigger('click');
    });

    $('#inp-hidden-file').on('change', function (e) {
        var $this = $(e.currentTarget);

        var formData = new FormData();
        formData.append('file', this.files[0]);

        $.ajax({
            url: "/api/chat/upload",
            data: formData,
            dataType: 'json',
            type: "POST",
            cache: false,
            processData: false,
            contentType: false,
            success: function (response) {
                send_message(_receiverId, response.data);
            }
        });
    });


    function remove_accent(str) {
        str = str.toLowerCase();
        str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
        str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
        str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
        str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
        str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
        str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
        str = str.replace(/đ/g, "d");
        str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'| |\"|\&|\#|\[|\]|~|$|_/g, "-");
        str = str.replace(/-+-/g, "-");
        str = str.replace(/^\-+|\-+$/g, "");
        return str;
    }
    (function ($) {
        // custom css expression for a case-insensitive contains()
        jQuery.expr[':'].Contains = function (a, i, m) {
            return (remove_accent(a.textContent) || remove_accent(a.innerText) || "").toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
        };
    }(jQuery));


    function filterList(header, list, options) {
        var options_default = {
            find: 'td',
            container: 'tr',
            placeHolder: 'Search...',
            name_input: 'keyword_filter',
            id_input: 'f_input',
            hidden: ''
        };
        height = $(list).css('height');

        options = $.extend({}, options_default, options);
        // header is any element, list is an unordered list
        // create and add the filter form to the header
        //var form = $("<form>").attr({"class":"filterform","action":"#"}),
        // input = $("<input>").attr('name', options.name_input).attr('id',options.id_input).attr({"class":"filterinput","type":"text", 'placeHolder': options.placeHolder});
        //$(form).append(input).appendTo(header);
        // $(input).appendTo(header);

        $('.contacts-search input').change(function () {
            var filter = remove_accent($(this).val());
            console.log(filter);
            if (filter) {

                $matches = $(list).find(options.find + ':Contains(' + filter + ')').parents(options.container);
                $(list).find(options.container).not($matches).hide();
                $matches.show();
                $(options.hidden).hide();
                $(list).css('height', 'auto');

            } else {
                $(list).find(options.container).show();
                $(list).css('height', height);
            }
            return false;
        }).keyup(function () {
            // fire the above change event after every letter
            $(this).change();
        });
    }

    filterList(
        $(".contacts-search"),
        $("ul.contacts-list"),
        {
            find: 'div',
            container: 'li',
            placeHolder: 'Tìm liên hệ'
        }
    );


    // Click to image message
    $(document).on('click', '.direct-chat-text .chat_image', function(e) {
        e.preventDefault();
        var $this = $(this);

        $.swipebox( [
            {
                href: $this.attr('src'),
                title:''
            },
        ] );

    });

    //Close box
    $(document).on('click', '.button_close_chat', function(){

        var receiver_id = $(this).parents('.chat-box-for-user').find('.input-message-to-chat').data('user_id');
        $(this).parents('.chat-box-for-user').slideDown(function () {
            $(this).remove();
            chatDatabase.ref('channel/' + temp_current_user_id + '/' + receiver_id).remove();
            sortBox();
        });
    });

    $(document).on('click', '#chat-link', function(){
        sortBox();
    });



});


function toggle_chat_box(ele) {
    if ($(ele).hasClass('123hide')) {
        //$(ele).parents('.chat-box-for-user').css('bottom', -10).css('z-index', 1);
        $(ele).parents('.chat-box-for-user').css('z-index', 1);
        $(ele).parents('.chat-box-for-user').find('.box-body').show();
        $(ele).parents('.chat-box-for-user').find('.box-footer').show();

    } else {
        // $(ele).parents('.chat-box-for-user').css('bottom', -325).css('z-index', 0);
        $(ele).parents('.chat-box-for-user').css('z-index', 0);
        $(ele).parents('.chat-box-for-user').find('.box-body').hide();
        $(ele).parents('.chat-box-for-user').find('.box-footer').hide();
    }

    $(ele).toggleClass('123hide');
}

function sortBox() {
    count = 0;
    if($('#chatbar').hasClass('open'))
    {
        left = 315;
    }else{
        left = 28;
    }
    $($('.chat-box-for-user').get().reverse()).each(function () {
        count = (count >= 2) ? 2 : count;
        $(this).css('right', left + count * 265);
        count++;
    });
}


/**
 * Handle event scroll box message
 */
function handleScrollBoxMessage(e) {
    if($this.scrollTop() == 0) {
        // Load old message
    }
}